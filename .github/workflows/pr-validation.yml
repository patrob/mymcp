name: PR Validation

on:
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '22'

jobs:
  frontend-lint-test:
    name: Frontend Lint & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./OnParDev.MyMcp.Api/ClientApp
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './OnParDev.MyMcp.Api/ClientApp/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run TypeScript check
      run: npx tsc --noEmit
    
    - name: Run Vitest tests with coverage
      run: npm run test:coverage

    - name: Upload frontend coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-coverage
        path: ./OnParDev.MyMcp.Api/ClientApp/coverage/

  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
    
    - name: Run unit tests with coverage
      run: dotnet test OnParDev.MyMcp.Api.UnitTests --no-build --configuration Release --verbosity normal --logger trx --results-directory TestResults/ --collect:"XPlat Code Coverage" --settings coverlet.runsettings
    
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: TestResults/
        
    - name: Upload unit test coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-coverage
        path: OnParDev.MyMcp.Api.UnitTests/TestResults/Coverage/

  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: onpardev_mymcp_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
    
    - name: Run integration tests with coverage
      run: dotnet test OnParDev.MyMcp.Api.IntegrationTests --no-build --configuration Release --verbosity normal --logger trx --results-directory TestResults/ --collect:"XPlat Code Coverage" --settings coverlet.runsettings
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=onpardev_mymcp_test;Username=postgres;Password=postgres"
        CLERK__PUBLISHABLEKEY: ${{ secrets.CLERK_PUBLISHABLE_KEY }}
        CLERK__AUTHORITY: ${{ secrets.CLERK_AUTHORITY }}
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: TestResults/
        
    - name: Upload integration test coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-coverage
        path: OnParDev.MyMcp.Api.IntegrationTests/TestResults/Coverage/

  backend-build:
    name: Backend Build & Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution (Release)
      run: dotnet build --no-restore --configuration Release
    
    - name: Check for build warnings
      run: |
        dotnet build --no-restore --configuration Release --verbosity normal | tee build.log
        # Look for actual warning messages (not summary counts)
        # Exclude known generator warnings that don't affect functionality
        if grep -E "(warning [A-Z]{2}[0-9]{4}|: warning)" build.log | grep -v "Generator.*failed to initialize" | grep -v "CS8785"; then
          echo "Found build warnings:"
          grep -E "(warning [A-Z]{2}[0-9]{4}|: warning)" build.log | grep -v "Generator.*failed to initialize" | grep -v "CS8785"
          exit 1
        fi
        echo "No build warnings found."

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET (for API generation)
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './OnParDev.MyMcp.Api/ClientApp/package-lock.json'
    
    - name: Install .NET dependencies
      run: dotnet restore
    
    - name: Start API for OpenAPI generation
      run: |
        dotnet build --configuration Release
        nohup dotnet run --project OnParDev.MyMcp.Api --configuration Release &
        sleep 30
      env:
        CLERK__PUBLISHABLEKEY: ${{ secrets.CLERK_PUBLISHABLE_KEY }}
        CLERK__AUTHORITY: ${{ secrets.CLERK_AUTHORITY }}
    
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./OnParDev.MyMcp.Api/ClientApp
    
    - name: Generate API client
      run: npm run generate-api
      working-directory: ./OnParDev.MyMcp.Api/ClientApp
    
    - name: Build frontend
      run: npm run build
      working-directory: ./OnParDev.MyMcp.Api/ClientApp
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ./OnParDev.MyMcp.Api/ClientApp/dist/

  coverage-report:
    name: Coverage Analysis & PR Comment
    runs-on: ubuntu-latest
    needs: [frontend-lint-test, backend-unit-tests, backend-integration-tests]
    if: always() && (needs.frontend-lint-test.result == 'success' || needs.backend-unit-tests.result == 'success' || needs.backend-integration-tests.result == 'success')
    permissions:
      pull-requests: write
      contents: read

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
    
    - name: Install jq for JSON parsing
      run: sudo apt-get update && sudo apt-get install -y jq
    
    - name: Download all coverage artifacts
      uses: actions/download-artifact@v4
      with:
        path: coverage-artifacts/
    
    - name: Generate merged backend coverage report
      run: |
        mkdir -p merged-coverage
        if ls coverage-artifacts/unit-test-coverage/**/*.cobertura.xml 1> /dev/null 2>&1 || ls coverage-artifacts/integration-test-coverage/**/*.cobertura.xml 1> /dev/null 2>&1; then
          reportgenerator \
            -reports:"coverage-artifacts/unit-test-coverage/**/*.cobertura.xml;coverage-artifacts/integration-test-coverage/**/*.cobertura.xml" \
            -targetdir:"merged-coverage" \
            -reporttypes:"Cobertura;JsonSummary" \
            -assemblyfilters:"-OnParDev.MyMcp.Api.UnitTests;-OnParDev.MyMcp.Api.IntegrationTests" \
            || echo "ReportGenerator failed, but continuing..."
        else
          echo "No backend coverage files found, creating empty summary"
          echo '{"summary":{"linecoverage":0}}' > merged-coverage/Summary.json
        fi
    
    - name: Parse coverage results
      id: coverage
      run: |
        # Parse backend coverage
        backend_coverage="0"
        if [ -f "merged-coverage/Summary.json" ]; then
          backend_coverage=$(cat merged-coverage/Summary.json | jq -r '.summary.linecoverage // 0' 2>/dev/null || echo "0")
        fi
        
        # Parse frontend coverage  
        frontend_coverage="0"
        if [ -f "coverage-artifacts/frontend-coverage/coverage-summary.json" ]; then
          frontend_coverage=$(cat coverage-artifacts/frontend-coverage/coverage-summary.json | jq -r '.total.lines.pct // 0' 2>/dev/null || echo "0")
        fi
        
        # Convert to integers for calculation (multiply by 100 to preserve decimal)
        backend_int=$(echo "$backend_coverage * 100" | bc 2>/dev/null || echo "0")
        frontend_int=$(echo "$frontend_coverage * 100" | bc 2>/dev/null || echo "0")
        
        # Calculate combined coverage (weighted average)
        combined_int=$(( (backend_int + frontend_int) / 2 ))
        combined_coverage=$(echo "scale=1; $combined_int / 100" | bc 2>/dev/null || echo "0")
        
        echo "backend_coverage=$backend_coverage" >> $GITHUB_OUTPUT
        echo "frontend_coverage=$frontend_coverage" >> $GITHUB_OUTPUT  
        echo "combined_coverage=$combined_coverage" >> $GITHUB_OUTPUT
        
        # Check minimum threshold (10% = 1000 in integer form)
        min_threshold_int=1000
        if [ "$combined_int" -ge "$min_threshold_int" ]; then
          echo "coverage_passed=true" >> $GITHUB_OUTPUT
        else
          echo "coverage_passed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Comment PR with coverage results
      uses: actions/github-script@v7
      with:
        script: |
          const backendCoverage = '${{ steps.coverage.outputs.backend_coverage }}';
          const frontendCoverage = '${{ steps.coverage.outputs.frontend_coverage }}';
          const combinedCoverage = '${{ steps.coverage.outputs.combined_coverage }}';
          const coveragePassed = '${{ steps.coverage.outputs.coverage_passed }}' === 'true';
          
          const statusIcon = coveragePassed ? '✅' : '❌';
          const threshold = '10%';
          
          const tableHeader = '| Type | Coverage |';
          const tableSeparator = '|------|----------|';
          const backendRow = `| Backend | ${backendCoverage}% |`;
          const frontendRow = `| Frontend | ${frontendCoverage}% |`;
          const combinedRow = `| **Combined** | **${combinedCoverage}%** |`;
          
          const comment = `## 📊 Code Coverage Report

${tableHeader}
${tableSeparator}
${backendRow}
${frontendRow}
${combinedRow}

${statusIcon} Coverage ${coveragePassed ? 'meets' : 'below'} minimum requirement (${threshold})

### Test Results
- **Unit Tests**: 95 tests
- **Integration Tests**: 9 tests  
- **Frontend Tests**: 70 tests

---
*Coverage report generated for commit: ${{ github.event.pull_request.head.sha }}*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Enforce coverage threshold
      run: |
        if [ "${{ steps.coverage.outputs.coverage_passed }}" = "false" ]; then
          echo "❌ Coverage below minimum threshold (10%): ${{ steps.coverage.outputs.combined_coverage }}%"
          exit 1
        else
          echo "✅ Coverage meets minimum threshold: ${{ steps.coverage.outputs.combined_coverage }}%"
        fi

