name: Deploy Application

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'infrastructure/**'
      - '**.md'
      - '.github/workflows/infrastructure-deploy.yml'
      - '.github/workflows/terraform-pr.yml'
  workflow_dispatch:
    inputs:
      droplet_ip:
        description: 'Droplet IP address (leave empty to use from infrastructure)'
        required: false
        type: string

permissions:
  contents: read

jobs:
  deploy-application:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get droplet IP from Terraform (if not provided)
        id: get-ip
        if: github.event.inputs.droplet_ip == ''
        working-directory: infrastructure
        run: |
          # Setup Terraform
          terraform init
          export TF_VAR_digitalocean_token="${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}"
          DROPLET_IP=$(terraform output -raw droplet_ip)
          echo "droplet_ip=${DROPLET_IP}" >> $GITHUB_OUTPUT

      - name: Set droplet IP
        id: set-ip
        run: |
          if [ "${{ github.event.inputs.droplet_ip }}" != "" ]; then
            echo "droplet_ip=${{ github.event.inputs.droplet_ip }}" >> $GITHUB_OUTPUT
          else
            echo "droplet_ip=${{ steps.get-ip.outputs.droplet_ip }}" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment files
        run: |
          # Create .env file for production
          cat > .env << EOF
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
          CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}
          CLERK_AUTHORITY=${{ secrets.CLERK_AUTHORITY }}
          EOF

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.set-ip.outputs.droplet_ip }} >> ~/.ssh/known_hosts

      - name: Copy files to server
        run: |
          # Create deployment directory on server
          ssh mymcp@${{ steps.set-ip.outputs.droplet_ip }} "mkdir -p /opt/mymcp"
          
          # Copy application files
          scp -r . mymcp@${{ steps.set-ip.outputs.droplet_ip }}:/opt/mymcp/
          
          # Copy environment file
          scp .env mymcp@${{ steps.set-ip.outputs.droplet_ip }}:/opt/mymcp/.env

      - name: Deploy application
        run: |
          ssh mymcp@${{ steps.set-ip.outputs.droplet_ip }} << 'EOF'
            cd /opt/mymcp
            
            # Stop existing containers
            docker-compose -f docker-compose.production.yml down || true
            
            # Remove old images to save space on $6/month droplet
            docker image prune -f
            
            # Build and start the application
            docker-compose -f docker-compose.production.yml up -d --build
            
            # Wait for services to be healthy
            echo "Waiting for services to start..."
            sleep 30
            
            # Check if services are running
            docker-compose -f docker-compose.production.yml ps
          EOF

      - name: Health check
        run: |
          # Wait for the application to be fully ready
          echo "Performing health check..."
          for i in {1..10}; do
            if curl -f http://${{ steps.set-ip.outputs.droplet_ip }}/health; then
              echo "✅ Application is healthy!"
              break
            else
              echo "⏳ Waiting for application to be ready... (attempt $i/10)"
              sleep 30
            fi
            if [ $i -eq 10 ]; then
              echo "❌ Health check failed after 10 attempts"
              exit 1
            fi
          done

      - name: Deployment summary
        run: |
          echo "🚀 Deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application URL:** http://${{ steps.set-ip.outputs.droplet_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check:** http://${{ steps.set-ip.outputs.droplet_ip }}/health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**SSH Access:** \`ssh mymcp@${{ steps.set-ip.outputs.droplet_ip }}\`" >> $GITHUB_STEP_SUMMARY