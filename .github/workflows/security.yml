name: Security Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp', 'typescript' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # Use default queries + security-extended for more comprehensive scanning
        queries: security-extended,security-and-quality
    
    # For C# analysis
    - name: Setup .NET
      if: matrix.language == 'csharp'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Cache NuGet packages
      if: matrix.language == 'csharp'
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Build .NET solution
      if: matrix.language == 'csharp'
      run: |
        dotnet restore
        dotnet build --no-restore --configuration Release
    
    # For TypeScript analysis  
    - name: Setup Node.js
      if: matrix.language == 'typescript'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './OnParDev.MyMcp.Api/ClientApp/package-lock.json'
    
    - name: Install frontend dependencies
      if: matrix.language == 'typescript'
      run: |
        cd OnParDev.MyMcp.Api/ClientApp
        npm ci
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch full history for better secret detection
        fetch-depth: 0
    
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  dependency-scanning:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './OnParDev.MyMcp.Api/ClientApp/package-lock.json'
    
    - name: Install .NET dependencies
      run: dotnet restore
    
    - name: Install npm dependencies
      run: |
        cd OnParDev.MyMcp.Api/ClientApp
        npm ci
    
    - name: Run .NET vulnerability scan
      run: dotnet list package --vulnerable --include-transitive
    
    - name: Run npm audit
      run: |
        cd OnParDev.MyMcp.Api/ClientApp
        npm audit --audit-level=moderate || echo "npm audit found vulnerabilities in dev dependencies - non-blocking"
      continue-on-error: true
    


