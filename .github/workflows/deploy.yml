name: Production Deployment

on:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
  workflow_dispatch:
    inputs:
      skip_infrastructure:
        description: "Skip infrastructure deployment"
        required: false
        default: false
        type: boolean
      droplet_ip:
        description: "Droplet IP address (leave empty to use from infrastructure)"
        required: false
        type: string

permissions:
  contents: read
  security-events: write

env:
  DOTNET_VERSION: "9.0.x"
  NODE_VERSION: "22"

jobs:
  # Security Analysis Jobs (Parallel)
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["csharp", "typescript"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      # For C# analysis
      - name: Setup .NET
        if: matrix.language == 'csharp'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        if: matrix.language == 'csharp'
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build .NET solution
        if: matrix.language == 'csharp'
        run: |
          dotnet restore
          dotnet build --no-restore --configuration Release

      # For TypeScript analysis
      - name: Setup Node.js
        if: matrix.language == 'typescript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./OnParDev.MyMcp.Api/ClientApp/package-lock.json"

      - name: Install frontend dependencies
        if: matrix.language == 'typescript'
        run: |
          cd OnParDev.MyMcp.Api/ClientApp
          npm ci

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  dependency-scanning:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./OnParDev.MyMcp.Api/ClientApp/package-lock.json"

      - name: Install .NET dependencies
        run: dotnet restore

      - name: Install npm dependencies
        run: |
          cd OnParDev.MyMcp.Api/ClientApp
          npm ci

      - name: Run .NET vulnerability scan
        run: dotnet list package --vulnerable --include-transitive

      - name: Run npm audit
        run: |
          cd OnParDev.MyMcp.Api/ClientApp
          npm audit --audit-level=moderate || echo "npm audit found vulnerabilities in dev dependencies - non-blocking"
        continue-on-error: true

  # Build and Test Jobs (Parallel, depends on security)
  frontend-build-test:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scanning]
    defaults:
      run:
        working-directory: ./OnParDev.MyMcp.Api/ClientApp

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET (for API generation)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./OnParDev.MyMcp.Api/ClientApp/package-lock.json"

      - name: Install .NET dependencies
        run: dotnet restore
        working-directory: ./

      - name: Start API for OpenAPI generation
        run: |
          dotnet build --configuration Release
          nohup dotnet run --project OnParDev.MyMcp.Api --configuration Release &
          sleep 30
        working-directory: ./
        env:
          CLERK__PUBLISHABLEKEY: ${{ secrets.CLERK_PUBLISHABLE_KEY }}
          CLERK__AUTHORITY: ${{ secrets.CLERK_AUTHORITY }}

      - name: Install frontend dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Run Vitest tests
        run: npm test

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Generate API client
        run: npm run generate-api

      - name: Build frontend
        run: npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-prod
          path: ./OnParDev.MyMcp.Api/ClientApp/dist/
          retention-days: 90

  backend-build-test:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scanning]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: onpardev_mymcp_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Run unit tests
        run: dotnet test OnParDev.MyMcp.Api.UnitTests --no-build --configuration Release --verbosity normal --logger trx --results-directory TestResults/

      - name: Run integration tests
        run: dotnet test OnParDev.MyMcp.Api.IntegrationTests --no-build --configuration Release --verbosity normal --logger trx --results-directory TestResults/
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Database=onpardev_mymcp_test;Username=postgres;Password=postgres"
          CLERK__PUBLISHABLEKEY: ${{ secrets.CLERK_PUBLISHABLE_KEY }}
          CLERK__AUTHORITY: ${{ secrets.CLERK_AUTHORITY }}

      - name: Publish API
        run: dotnet publish OnParDev.MyMcp.Api --configuration Release --output ./publish-api -p:SkipFrontendBuild=true

      - name: Upload API build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-build-prod
          path: ./publish-api/
          retention-days: 90

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-prod
          path: TestResults/
          retention-days: 30

  # Infrastructure Deployment
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [frontend-build-test, backend-build-test]
    if: github.event.inputs.skip_infrastructure != 'true'
    environment: production

    defaults:
      run:
        working-directory: infrastructure

    outputs:
      droplet_ip: ${{ steps.outputs.outputs.droplet_ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
          SPACES_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
          SPACES_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
        run: terraform init


      - name: Terraform Plan
        id: plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
          SPACES_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
          SPACES_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
          TF_VAR_digitalocean_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
          SPACES_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
          SPACES_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
          TF_VAR_digitalocean_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        run: terraform apply -auto-approve tfplan

      - name: Get outputs
        id: outputs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
          SPACES_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
          SPACES_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
        run: |
          echo "droplet_ip=$(terraform output -raw droplet_ip)" >> $GITHUB_OUTPUT
          echo "ssh_connection=$(terraform output -raw ssh_connection)" >> $GITHUB_OUTPUT

      - name: Infrastructure deployment summary
        run: |
          echo "🏗️ Infrastructure deployed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "**Droplet IP:** ${{ steps.outputs.outputs.droplet_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "**SSH:** ${{ steps.outputs.outputs.ssh_connection }}" >> $GITHUB_STEP_SUMMARY

  # Application Deployment
  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: always() && (needs.deploy-infrastructure.result == 'success' || needs.deploy-infrastructure.result == 'skipped')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get droplet IP
        id: get-ip
        run: |
          if [ "${{ github.event.inputs.droplet_ip }}" != "" ]; then
            echo "droplet_ip=${{ github.event.inputs.droplet_ip }}" >> $GITHUB_OUTPUT
          elif [ "${{ needs.deploy-infrastructure.outputs.droplet_ip }}" != "" ]; then
            echo "droplet_ip=${{ needs.deploy-infrastructure.outputs.droplet_ip }}" >> $GITHUB_OUTPUT
          else
            # Fallback: get from Terraform state
            cd infrastructure
            export AWS_ACCESS_KEY_ID="${{ secrets.SPACES_ACCESS_KEY_ID }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.SPACES_SECRET_ACCESS_KEY }}"
            export SPACES_ACCESS_KEY_ID="${{ secrets.SPACES_ACCESS_KEY_ID }}"
            export SPACES_SECRET_ACCESS_KEY="${{ secrets.SPACES_SECRET_ACCESS_KEY }}"
            export TF_VAR_digitalocean_token="${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}"
            export TF_VAR_ssh_public_key="${{ secrets.SSH_PUBLIC_KEY }}"
            terraform init
            DROPLET_IP=$(terraform output -raw droplet_ip)
            echo "droplet_ip=${DROPLET_IP}" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment files
        run: |
          cat > .env << EOF
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
          CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}
          CLERK_AUTHORITY=${{ secrets.CLERK_AUTHORITY }}
          EOF

      - name: Wait for droplet readiness
        run: |
          echo "⏳ Waiting for droplet to be ready..."
          for i in {1..8}; do
            if nc -z -w5 ${{ steps.get-ip.outputs.droplet_ip }} 22; then
              echo "✅ SSH port accessible"
              break
            else
              echo "⏳ Waiting for SSH... (attempt $i/8)"
              sleep 15
            fi
            if [ $i -eq 8 ]; then
              echo "❌ SSH port not available"
              exit 1
            fi
          done
          
          # Wait for cloud-init
          echo "⏳ Waiting for cloud-init..."
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no root@${{ steps.get-ip.outputs.droplet_ip }} "cloud-init status --wait" || echo "⚠️ Cloud-init check failed, proceeding"

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.get-ip.outputs.droplet_ip }} >> ~/.ssh/known_hosts
          
          # Quick key validation
          ssh-keygen -y -f ~/.ssh/id_rsa &>/dev/null && echo "✅ SSH key valid" || (echo "❌ SSH key invalid" && exit 1)

      - name: Copy files to server
        run: |
          # Use root user for deployment
          ssh root@${{ steps.get-ip.outputs.droplet_ip }} "mkdir -p /opt/mymcp"
          scp -r . root@${{ steps.get-ip.outputs.droplet_ip }}:/opt/mymcp/
          scp .env root@${{ steps.get-ip.outputs.droplet_ip }}:/opt/mymcp/.env

      - name: Setup Docker Environment
        run: |
          ssh root@${{ steps.get-ip.outputs.droplet_ip }} << 'EOF'
            echo "🔍 Checking Docker installation..."
            
            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "📦 Installing Docker..."
              
              # Update packages
              apt-get update
              
              # Install Docker
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              
              # Start and enable Docker
              systemctl enable docker
              systemctl start docker
              
              echo "✅ Docker installed successfully"
            else
              echo "✅ Docker is already installed"
              systemctl start docker || true
            fi
            
            # Check if Docker Compose is installed
            if ! command -v docker-compose &> /dev/null; then
              echo "📦 Installing Docker Compose..."
              
              # Install Docker Compose
              curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              
              echo "✅ Docker Compose installed successfully"
            else
              echo "✅ Docker Compose is already installed"
            fi
            
            # Verify installations
            echo "🔍 Verifying installations:"
            docker --version
            docker-compose --version
            
            echo "✅ Docker environment ready"
          EOF

      - name: Deploy application
        run: |
          ssh root@${{ steps.get-ip.outputs.droplet_ip }} << 'EOF'
            cd /opt/mymcp
            
            # Minimize downtime deployment strategy
            echo "🚀 Starting zero-downtime deployment..."
            
            # Check what files have changed to determine deployment strategy
            git fetch origin main || echo "Git fetch failed, deploying all services"
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
            DB_CHANGED=$(echo "$CHANGED_FILES" | grep -E "(db/|docker-compose|Dockerfile)" || echo "")
            FRONTEND_CHANGED=$(echo "$CHANGED_FILES" | grep -E "(ClientApp/|nginx/)" || echo "")
            BACKEND_CHANGED=$(echo "$CHANGED_FILES" | grep -E "(OnParDev.MyMcp.Api/.*\.(cs|csproj))" || echo "")
            
            echo "📋 Change analysis:"
            echo "  Database/Infrastructure: ${DB_CHANGED:-"No changes"}"
            echo "  Frontend: ${FRONTEND_CHANGED:-"No changes"}"
            echo "  Backend: ${BACKEND_CHANGED:-"No changes"}"
            
            # Build new images first (without stopping old containers)
            echo "🔨 Building new images..."
            docker-compose -f docker-compose.production.yml build
            
            # Smart container management - only restart what changed
            echo "⚡ Performing selective container updates..."
            
            # Always ensure postgres is running (but don't restart unless DB changed)
            if docker ps | grep -q "mymcp-postgres"; then
              if [ -n "$DB_CHANGED" ]; then
                echo "🔄 Database changes detected - restarting postgres..."
                docker-compose -f docker-compose.production.yml up -d postgres
              else
                echo "✅ Database running, no changes - keeping existing container"
              fi
            else
              echo "🆕 Starting postgres container..."
              docker-compose -f docker-compose.production.yml up -d postgres
            fi
            
            # Run flyway only if database changes detected or first deployment
            if [ -n "$DB_CHANGED" ] || ! docker ps -a | grep -q "mymcp-flyway"; then
              echo "🔄 Running database migrations..."
              docker-compose -f docker-compose.production.yml up --no-deps flyway
            else
              echo "✅ No database changes - skipping migrations"
            fi
            
            # Update application if backend changed
            if docker ps | grep -q "mymcp-app"; then
              if [ -n "$BACKEND_CHANGED" ] || [ -n "$DB_CHANGED" ]; then
                echo "🔄 Backend changes detected - updating application..."
                docker-compose -f docker-compose.production.yml up -d --no-deps app
              else
                echo "✅ No backend changes - keeping existing app container"
              fi
            else
              echo "🆕 Starting application..."
              docker-compose -f docker-compose.production.yml up -d app
            fi
            
            # Update nginx if frontend or nginx config changed
            if docker ps | grep -q "mymcp-nginx"; then
              if [ -n "$FRONTEND_CHANGED" ] || echo "$CHANGED_FILES" | grep -q "nginx/"; then
                echo "🔄 Frontend/nginx changes detected - updating nginx..."
                docker-compose -f docker-compose.production.yml up -d --no-deps nginx
              else
                echo "✅ No frontend changes - keeping existing nginx container"
              fi
            else
              echo "🆕 Starting nginx..."
              docker-compose -f docker-compose.production.yml up -d nginx
            fi
            
            # Clean up old containers and images after successful deployment
            echo "🧹 Cleaning up old resources..."
            docker container prune -f
            docker image prune -f
            
            # Wait for services to be ready
            echo "⏳ Waiting for services to start..."
            sleep 20
            
            # SSL certificate management (simplified)
            if ! docker run --rm -v mymcp_certbot_certs:/etc/letsencrypt alpine test -f /etc/letsencrypt/live/mymcp.online/fullchain.pem; then
              echo "🔒 Requesting SSL certificate from Let's Encrypt..."
              if curl -f http://mymcp.online/health --connect-timeout 10; then
                docker-compose -f docker-compose.production.yml run --rm certbot certonly \
                  --webroot --webroot-path=/var/www/certbot \
                  --email admin@mymcp.online --agree-tos --no-eff-email \
                  -d mymcp.online && echo "✅ SSL certificate obtained" || echo "⚠️ SSL setup failed, using HTTP mode"
              else
                echo "⚠️ Domain not accessible, using HTTP mode"
              fi
            fi
            
            # Set up SSL auto-renewal
            chmod +x /opt/mymcp/scripts/renew-ssl.sh 2>/dev/null || echo "SSL renewal script not found"
            (crontab -l 2>/dev/null; echo "0 */12 * * * /opt/mymcp/scripts/renew-ssl.sh >> /var/log/ssl-renewal.log 2>&1") | crontab - 2>/dev/null
            
            echo "✅ Deployment completed successfully"
          EOF

      - name: Deployment diagnostics
        run: |
          echo "🔍 Running essential deployment checks..."
          ssh root@${{ steps.get-ip.outputs.droplet_ip }} << 'EOF'
            cd /opt/mymcp
            
            echo "📊 Container status:"
            docker-compose -f docker-compose.production.yml ps
            
            echo "🌐 Port connectivity:"
            nc -z localhost 80 && echo "✅ Port 80 accessible" || echo "❌ Port 80 failed"
            nc -z localhost 443 && echo "✅ Port 443 accessible" || echo "❌ Port 443 failed"
            
            echo "🏥 Health check:"
            curl -s -o /dev/null -w "HTTP %{http_code}" http://localhost:80/health && echo " ✅" || echo " ❌"
          EOF

      - name: Health check
        run: |
          echo "🏥 Performing health check..."
          
          # Test basic connectivity
          for i in {1..5}; do
            if nc -z -w5 ${{ steps.get-ip.outputs.droplet_ip }} 80; then
              echo "✅ Port 80 accessible"
              break
            else
              echo "⏳ Waiting for port 80... (attempt $i/5)"
              sleep 10
            fi
            if [ $i -eq 5 ]; then
              echo "❌ Port 80 never became available"
              exit 1
            fi
          done
          
          # Test health endpoint
          for i in {1..5}; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ steps.get-ip.outputs.droplet_ip }}/health || echo "000")
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ HTTP health endpoint working (HTTP $HTTP_CODE)"
              break
            elif [ "$HTTP_CODE" = "301" ] || [ "$HTTP_CODE" = "302" ]; then
              # Try HTTPS
              if curl -f -k https://${{ steps.get-ip.outputs.droplet_ip }}/health; then
                echo "✅ HTTPS health endpoint working (redirected from HTTP)"
                break
              fi
            fi
            
            if [ $i -eq 5 ]; then
              echo "❌ Health endpoint failed (HTTP $HTTP_CODE)"
              exit 1
            else
              echo "⏳ Waiting for health endpoint... (attempt $i/5)"
              sleep 10
            fi
          done
          
          echo "🎉 Deployment successful!"

      - name: Deployment summary
        run: |
          echo "🚀 Production deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$SSL_MODE" = "true" ]; then
            echo "**Application URL:** https://mymcp.online" >> $GITHUB_STEP_SUMMARY
            echo "**Health Check:** https://mymcp.online/health" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Application URL:** http://mymcp.online" >> $GITHUB_STEP_SUMMARY
            echo "**Health Check:** http://mymcp.online/health" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**SSH Access:** \`ssh mymcp@${{ steps.get-ip.outputs.droplet_ip }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Pipeline:**" >> $GITHUB_STEP_SUMMARY
          echo "✅ Security Analysis (CodeQL, Dependencies)" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build & Test (Frontend + Backend)" >> $GITHUB_STEP_SUMMARY
          echo "✅ Infrastructure Deployment" >> $GITHUB_STEP_SUMMARY
          echo "✅ Application Deployment" >> $GITHUB_STEP_SUMMARY
