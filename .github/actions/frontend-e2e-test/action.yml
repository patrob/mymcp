name: 'Frontend E2E Test'
description: 'Run frontend end-to-end tests with Playwright'

inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '22'
  dotnet-version:
    description: '.NET version for API generation'
    required: false
    default: '9.0.x'

runs:
  using: 'composite'
  steps:
    - name: Setup .NET (for API generation)
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'npm'
        cache-dependency-path: './OnParDev.MyMcp.Api/ClientApp/package-lock.json'

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Install .NET dependencies
      shell: bash
      run: dotnet restore

    - name: Build API for E2E tests
      shell: bash
      run: |
        dotnet build --configuration Release

    - name: Install frontend dependencies
      shell: bash
      run: |
        cd OnParDev.MyMcp.Api/ClientApp
        npm ci

    - name: Install Playwright browsers
      shell: bash
      run: |
        cd OnParDev.MyMcp.Api/ClientApp
        npx playwright install --with-deps chromium

    - name: Start API server for E2E tests
      shell: bash
      run: |
        # Start the API server in background for OpenAPI generation and E2E tests
        echo "Starting API server for E2E tests..."
        nohup dotnet run --project OnParDev.MyMcp.Api --configuration Release --urls "http://0.0.0.0:5099" > api-e2e.log 2>&1 &
        API_PID=$!
        echo "API PID: $API_PID"
        echo $API_PID > api.pid
        
        # Wait for API to be ready
        echo "Waiting for API to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:5099/health > /dev/null 2>&1; then
            echo "API is ready for E2E tests"
            break
          fi
          echo "Waiting for API... (attempt $i/30)"
          sleep 2
        done
        
        if [ $i -eq 30 ]; then
          echo "API failed to start within timeout"
          echo "=== API Log ==="
          cat api-e2e.log || echo "No API log available"
          echo "=== End API Log ==="
          exit 1
        fi
      env:
        CLERK__PUBLISHABLEKEY: ${{ env.CLERK_PUBLISHABLE_KEY }}
        CLERK__AUTHORITY: ${{ env.CLERK_AUTHORITY }}

    - name: Generate API client for E2E tests
      shell: bash
      run: |
        cd OnParDev.MyMcp.Api/ClientApp
        echo "Generating API client..."
        npm run generate-api

    - name: Run E2E tests
      shell: bash
      run: |
        cd OnParDev.MyMcp.Api/ClientApp
        # Only run chromium tests in CI for speed
        npx playwright test --project=chromium
      env:
        CI: true
        CLERK__PUBLISHABLEKEY: ${{ env.CLERK_PUBLISHABLE_KEY }}
        CLERK__AUTHORITY: ${{ env.CLERK_AUTHORITY }}

    - name: Cleanup API server
      shell: bash
      run: |
        # Stop the API server
        if [ -f api.pid ]; then
          API_PID=$(cat api.pid)
          echo "Stopping API server (PID: $API_PID)..."
          kill $API_PID || true
          rm -f api.pid api.port
        fi
        # Cleanup any remaining dotnet processes
        pkill -f "dotnet run" || true
        echo "API server stopped"
      if: always()

    - name: Upload E2E test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-${{ github.run_id }}
        path: ./OnParDev.MyMcp.Api/ClientApp/playwright-report/
        retention-days: 30

    - name: Upload E2E test traces
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-traces-${{ github.run_id }}
        path: ./OnParDev.MyMcp.Api/ClientApp/test-results/
        retention-days: 30